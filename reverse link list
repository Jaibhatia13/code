#include<iostream>

using namespace std;

class Node {

    public:
    int data;
    Node * next;
    Node (int data){
        this -> data = data;
        this->next = NULL;

    }
};

class SingleLinkedList {

    public:

    SingleLinkedList()
    {}

    void Display (Node * head) {

        Node * current = head;
        while (current != nullptr) {
            cout << current->data << " ";
            current = current->next;
        }
    }

    Node * Reverse (Node * head) {

       
        if (head == nullptr || head->next == nullptr)
            return head;

        Node * current = head;
        Node * next_to_current = head->next;
        head->next = nullptr;

        while (next_to_current != nullptr) {

            Node * temp = next_to_current->next;
            next_to_current->next = current;

            current = next_to_current;
            next_to_current = temp;
        }
        return current;
    }

  
};

int main() {

   Node * head = new Node(2);
   Node * node_3 = new Node(3);
   Node * node_5 = new Node(5);
   Node * node_7 = new Node(7);
   Node * node_11 = new Node(11);
   Node * node_13 = new Node(13);

   head->next = node_3;
   node_3->next = node_5;
   node_5->next = node_7;
   node_7->next = node_11;
   node_11->next = node_13;

   SingleLinkedList s;

   cout <<"\nSingle linked list : " << endl;
   s.Display(head);
   cout <<"\nReversing the single linked list : " << endl;
   head = s.Reverse(head);
   s.Display(head);
   cout <<"\nFreeing the single linked list." << endl;
  
   return 0;
}
