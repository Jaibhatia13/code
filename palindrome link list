#include <bits/stdc++.h>
using namespace std;


class Node {
public:
    int data;
    Node *next;
};


void insertNode(Node **head, int newData) {
    Node *newNode = new Node();
    newNode->data = newData;
    newNode->next = (*head);
    (*head) = newNode;
}


bool checkPalindrome(Node *head) {
    // a pointer that will help us to traverse the linked list.
    Node *currentPointer = head;

    // initialize a stack data structure.
    stack<int> s;

    // Pushing the elements of the linked list to the stack.
    while (currentPointer != NULL) {
        s.push(currentPointer->data);
        currentPointer = currentPointer->next;
    }

    // Iterating the list again and checking if the top of the stack is the same as the current element or not.
    while (head != NULL) {
        // getting the top element for comparison.
        int i = s.top();
        s.pop();

        // Checking the top element and current element are the same or not.
        if (head->data != i)
            return false;

        head = head->next;
    }
    return true;
}

int main() {
    // an empty linked list
    Node *l = NULL;

    insertNode(&l, 1);
    insertNode(&l, 2);
    insertNode(&l, 3);
    insertNode(&l, 2);
    insertNode(&l, 1);

    if (checkPalindrome(l) == 1)
        cout << "The linked list is a palindrome linked list.";
    else
        cout << "The linked list is not a palindrome linked list.";

    return 0;
}
